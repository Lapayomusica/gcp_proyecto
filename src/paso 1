1. Interfaz Web de Recarga Crea una aplicación frontend (por ejemplo, con HTML + JS o una app ligera en React/Vue) donde el usuario pueda ingresar: Número telefónico. Monto de recarga. Al enviar el formulario, se debe emitir un mensaje de forma asincrónica a un sistema de procesamiento backend. 💡 Recomendación GCP: Utiliza AppEngine o Cloud Run como backend HTTP endpoint que recibe la solicitud y publique el evento en un tópico.

¡Perfecto! Aquí tienes un ejemplo sencillo y funcional de una interfaz web de recarga (HTML + JS puro) que envía los datos de recarga a un backend HTTP en Cloud Run o App Engine, el cual a su vez publica el evento en un tópico Pub/Sub.

1. Frontend sencillo en HTML + JS
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Recarga Telefónica</title>
  <style>
    body { font-family: sans-serif; margin: 2em; }
    form { max-width: 300px; margin: auto; }
    label { display: block; margin-top: 1em; }
    button { margin-top: 1em; }
  </style>
</head>
<body>
  <h2>Recargar saldo</h2>
  <form id="recargaForm">
    <label>
      Número telefónico:
      <input type="tel" name="numero" required pattern="[0-9]{10,15}">
    </label>
    <label>
      Monto de recarga:
      <input type="number" name="monto" required min="1">
    </label>
    <button type="submit">Enviar recarga</button>
  </form>
  <p id="mensaje"></p>

  <script>
    document.getElementById('recargaForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      const numero = this.numero.value;
      const monto = this.monto.value;
      document.getElementById('mensaje').textContent = "Enviando recarga...";
      try {
        // Cambia la URL por la de tu backend en Cloud Run o App Engine
        const response = await fetch('https://YOUR_BACKEND_URL/recarga', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ numero, monto })
        });
        if(response.ok) {
          document.getElementById('mensaje').textContent = "¡Recarga enviada!";
        } else {
          document.getElementById('mensaje').textContent = "Error al enviar recarga.";
        }
      } catch (err) {
        document.getElementById('mensaje').textContent = "Error de conexión.";
      }
    });
  </script>
</body>
</html>
Reemplaza https://YOUR_BACKEND_URL/recarga con la URL real de tu backend en Cloud Run o App Engine.


2. Ejemplo de backend HTTP para Cloud Run (Node.js/Express)
Este backend recibe la solicitud y la publica en un tópico Pub/Sub.

index.js:

const express = require('express');
const {PubSub} = require('@google-cloud/pubsub');
const pubsub = new PubSub();
const app = express();
app.use(express.json());

app.post('/recarga', async (req, res) => {
  const {numero, monto} = req.body;
  if (!numero || !monto) return res.status(400).send('Datos incompletos');
  await pubsub.topic('recargas').publishMessage({ json: { numero, monto, fecha: new Date().toISOString() }});
  res.status(200).send('Recarga recibida');
});

const PORT = process.env.PORT || 8080;
app.listen(PORT, () => console.log(`Escuchando en ${PORT}`));
package.json:

{
  "name": "recarga-backend",
  "dependencies": {
    "express": "^4.17.1",
    "@google-cloud/pubsub": "^4.0.0"
  }
}
Despliegue en Cloud Run:
Construye y sube la imagen:
gcloud builds submit --tag gcr.io/PROYECTO/recarga-backend
Despliega en Cloud Run:
gcloud run deploy recarga-backend \
  --image gcr.io/PROYECTO/recarga-backend \
  --platform managed \
  --region us-central1 \
  --allow-unauthenticated
Despliegue en App Engine (opcional):
Crea un archivo app.yaml:
runtime: nodejs20
entrypoint: node index.js
Despliega:
gcloud app deploy
3. Crear el tópico Pub/Sub
gcloud pubsub topics create recargas
Notas
Esta solución usa únicamente recursos gratuitos/capa free-tier de GCP.
Puedes alojar el frontend en Cloud Storage/Firebase Hosting o incluso en App Engine estático.
La comunicación entre frontend y backend es asíncrona (fetch).
El backend es fácilmente ampliable para autenticar, validar o agregar lógica de negocio.
¿Quieres la versión en React/Vue, ejemplos de despliegue automático, o ayuda para la suscripción Pub/Sub/Firestore? ¡Dímelo!