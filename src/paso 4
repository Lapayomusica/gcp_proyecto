4. Microservicio de Actualización de Saldo Otro microservicio, desplegado en un pod diferente, debe recibir una llamada posterior para actualizar el saldo en una tabla que relacione número telefónico y monto actual. 💡 Recomendación GCP: Despliega este servicio en un segundo pod en GKE Autopilot o Estandard. Puede compartir la misma base de datos Firestore o utilizar una colección separada. También debe estar expuesto mediante Ingress.

¡Por supuesto! Aquí tienes la guía para crear el Microservicio de Actualización de Saldo en GKE, usando Firestore, expuesto por Ingress, y listo para integrarse a tu arquitectura.

1. Código del microservicio (Node.js + Express + Firestore)
index.js

const express = require('express');
const {Firestore} = require('@google-cloud/firestore');
const app = express();
const firestore = new Firestore();

app.use(express.json());

app.post('/actualizar-saldo', async (req, res) => {
  const {numero, monto} = req.body;
  if (!numero || !monto) return res.status(400).send("Datos incompletos");
  const docRef = firestore.collection('saldos').doc(numero);
  await firestore.runTransaction(async t => {
    const doc = await t.get(docRef);
    let saldoActual = doc.exists ? doc.data().saldo : 0;
    t.set(docRef, {saldo: saldoActual + Number(monto)});
  });
  res.send('Saldo actualizado');
});

const PORT = process.env.PORT || 8080;
app.listen(PORT, () => console.log(`Microservicio de Saldo escuchando en ${PORT}`));
package.json

{
  "name": "actualizar-saldo",
  "dependencies": {
    "express": "^4.17.1",
    "@google-cloud/firestore": "^7.0.0"
  }
}
Dockerfile

FROM node:20
WORKDIR /usr/src/app
COPY package*.json ./
RUN npm install
COPY . .
CMD ["node", "index.js"]
2. Construir y subir la imagen a Artifact Registry
docker build -t us-central1-docker.pkg.dev/PROYECTO/microservicios/actualizar-saldo:latest .
docker push us-central1-docker.pkg.dev/PROYECTO/microservicios/actualizar-saldo:latest
Cambia PROYECTO por tu ID de proyecto.

3. Despliegue en GKE
actualizar-saldo-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: actualizar-saldo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: actualizar-saldo
  template:
    metadata:
      labels:
        app: actualizar-saldo
    spec:
      containers:
      - name: actualizar-saldo
        image: us-central1-docker.pkg.dev/PROYECTO/microservicios/actualizar-saldo:latest
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: actualizar-saldo
spec:
  selector:
    app: actualizar-saldo
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
4. Exponer con Ingress
Añade este path al mismo Ingress que usas para otros servicios, o crea uno nuevo:

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: plataforma-recargas-ingress
  annotations:
    kubernetes.io/ingress.class: "gce"
spec:
  rules:
  - http:
      paths:
      - path: /actualizar-saldo
        pathType: Prefix
        backend:
          service:
            name: actualizar-saldo
            port:
              number: 80
5. Despliega en GKE
kubectl apply -f actualizar-saldo-deployment.yaml
kubectl apply -f plataforma-recargas-ingress.yaml  # solo si es nuevo o cambió
Obtén la IP pública (EXTERNAL-IP):

kubectl get ingress
6. Prueba el servicio
curl -X POST http://[EXTERNAL_IP]/actualizar-saldo \
  -H "Content-Type: application/json" \
  -d '{"numero":"5551234567","monto":50}'
Notas y buenas prácticas
Puedes usar la misma base de datos Firestore que otros microservicios, pero en otra colección (saldos).
Todos los logs se recogen automáticamente en Cloud Logging.
(Opcional) Usa Workload Identity para acceso seguro a Firestore.
Si combinas los paths en un solo Ingress, tendrás un solo Load Balancer gratuito.